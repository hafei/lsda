<?xml version="1.0"?>
<!-- 
    As an alternative to hand editing this file you can use the 
    web admin tool to configure settings for your application. Use
    the Website->Asp.Net Configuration option in Visual Studio.
    A full list of settings and comments can be found in 
    machine.config.comments usually located in 
    \Windows\Microsoft.Net\Framework\v2.x\Config 
-->
<configuration>

    <configSections>
        <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" requirePermission="false"/>
        <section name="policyInjection" type="Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings, Microsoft.Practices.EnterpriseLibrary.PolicyInjection" requirePermission="false"/>
        <section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" requirePermission="false"/>
    </configSections>

    <appSettings/>

    <unity>
        <typeAliases>
            <!-- Lifetime Managers -->
            <typeAlias alias="Singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity"/>
            <typeAlias alias="External" type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager, Microsoft.Practices.Unity"/>
            <!-- In testing environment PerRequest equals Singleton -->
            <typeAlias alias="PerRequest" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
            <!---->

            <!-- DataAccess -->
            <typeAlias alias="IConnectionString" type="LogicSoftware.DataAccess.Repository.LinqToSql.IConnectionString, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="ConfigurationConnectionString" type="LogicSoftware.DataAccess.Repository.LinqToSql.ConfigurationConnectionString, LogicSoftware.DataAccess.Repository" />

            <typeAlias alias="ISqlConnectionManager" type="LogicSoftware.DataAccess.Repository.LinqToSql.ISqlConnectionManager, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="SqlConnectionManager" type="LogicSoftware.DataAccess.Repository.LinqToSql.SqlConnectionManager, LogicSoftware.DataAccess.Repository" />
            
            <typeAlias alias="IRepository" type="LogicSoftware.DataAccess.Repository.Basic.IRepository, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="LinqToSqlRepository" type="LogicSoftware.DataAccess.Repository.LinqToSql.LinqToSqlRepository, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="DisposableLinqToSqlRepository" type="LogicSoftware.DataAccess.Repository.LinqToSql.DisposableLinqToSqlRepository, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="MemoryRepository" type="LogicSoftware.DataAccess.Repository.Memory.MemoryRepository, LogicSoftware.DataAccess.Repository" />

            <typeAlias alias="IExtendedRepository" type="LogicSoftware.DataAccess.Repository.Extended.IExtendedRepository, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="ExtendedRepository" type="LogicSoftware.DataAccess.Repository.Extended.ExtendedRepository, LogicSoftware.DataAccess.Repository" />

            <typeAlias alias="IExtendedQueryExecutor" type="LogicSoftware.DataAccess.Repository.Extended.IExtendedQueryExecutor, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="ExtendedQueryExecutor" type="LogicSoftware.DataAccess.Repository.Extended.ExtendedQueryExecutor, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="ValidatingExtendedQueryExecutor" type="LogicSoftware.DataAccess.Repository.Tests.Extensions.ValidatingExtendedQueryExecutor, LogicSoftware.DataAccess.Repository.Tests" />

            <typeAlias alias="IRepositoryExtensionsProvider" type="LogicSoftware.DataAccess.Repository.Extended.IRepositoryExtensionsProvider, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="RepositoryExtensionsProvider" type="LogicSoftware.DataAccess.Repository.Extended.RepositoryExtensionsProvider, LogicSoftware.DataAccess.Repository" />

            <typeAlias alias="IInterceptorFactory" type="LogicSoftware.DataAccess.Repository.Extended.Interceptors.IInterceptorFactory, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="InterceptorFactory" type="LogicSoftware.DataAccess.Repository.Extended.Interceptors.InterceptorFactory, LogicSoftware.DataAccess.Repository" />

            <typeAlias alias="IScope" type="LogicSoftware.DataAccess.Repository.Extended.IScope, LogicSoftware.DataAccess.Repository" />
            <typeAlias alias="ITestScope" type="LogicSoftware.DataAccess.Repository.Tests.ITestScope, LogicSoftware.DataAccess.Repository.Tests" />
            <typeAlias alias="TestScope" type="LogicSoftware.DataAccess.Repository.Tests.TestScope, LogicSoftware.DataAccess.Repository.Tests" />
            <!---->
        </typeAliases>
        <containers>
            <container>
                <types>
                    <type type="ITestScope" mapTo="TestScope">
                        <lifetime type="PerRequest" />
                    </type>
                    <type type="IScope" mapTo="TestScope">
                        <lifetime type="PerRequest" />
                    </type>

                    <type type="IRepository" mapTo="MemoryRepository">
                        <lifetime type="PerRequest" />
                    </type>

                    <type type="IExtendedRepository" mapTo="ExtendedRepository">
                        <lifetime type="PerRequest" />
                    </type>

                    <type type="IExtendedQueryExecutor" mapTo="ExtendedQueryExecutor" />

                    <type type="IRepositoryExtensionsProvider" mapTo="RepositoryExtensionsProvider" />

                    <type type="IInterceptorFactory" mapTo="InterceptorFactory" />
                </types>
                <extensionConfig>
                    <add name="extendedInterception" type="LogicSoftware.Infrastructure.EntLib.ExtendedInterceptionElement, LogicSoftware.Infrastructure.EntLib" interceptor="Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor, Microsoft.Practices.Unity.Interception"/>
                </extensionConfig>
            </container>
        </containers>
    </unity>

    <!--<policyInjection>
        <policies>
            <add name="Policy">
                <matchingRules>
                    <add type="Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule, Microsoft.Practices.EnterpriseLibrary.PolicyInjection, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                      name="LogicSoftware.DataAccess* Namespace">
                        <matches>
                            <add match="LogicSoftware.DataAccess" ignoreCase="false" />
                            <add match="LogicSoftware.DataAccess.*" ignoreCase="false" />
                        </matches>
                    </add>
                </matchingRules>
                <handlers>
                    <add exceptionPolicyName="DataAccess Exception Policy" order="0"
                      type="Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.ExceptionCallHandler, Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                      name="DataAccess Exception Policy" />
                </handlers>
            </add>
        </policies>
    </policyInjection>-->

    <!--<exceptionHandling>
        <exceptionPolicies>
            <add name="DataAccess Exception Policy">
                <exceptionTypes>
                    <add type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                      postHandlingAction="ThrowNewException" name="Exception">
                        <exceptionHandlers>
                            <add exceptionMessage="DataAccess Error" exceptionMessageResourceType=""
                              exceptionMessageResourceName=""
                              wrapExceptionType="LogicSoftware.Infrastructure.Exceptions.DataAccessException, LogicSoftware.Infrastructure"
                              type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=4.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                              name="Wrap Handler" />
                        </exceptionHandlers>
                    </add>
                </exceptionTypes>
            </add>
        </exceptionPolicies>
    </exceptionHandling>-->
    
</configuration>